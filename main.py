import asyncio
import sys
import time
from pyrogram.handlers import MessageHandler
from data import licensia_check, main_bot_function
from pyrogram import Client
from pyrogram.enums import ChatType
from pyrogram.errors import FloodWait
from handlers import all_handlers
from data.log import logger
from functions_ import search_chats_raw, is_member


def clear_line():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏"""
    sys.stdout.write('\r\033[K')
    sys.stdout.flush()


class AsyncConsoleManager:
    def __init__(self):
        self.app = Client(api_hash='54b8ea23241abdef8044090c3c9a2add', api_id='28982778',
                          name="hella", skip_updates=True)
        self.is_running = False
        self.bot_task = None

    def setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
        for handler, filter in all_handlers:
            self.app.add_handler(MessageHandler(handler, filter))

    async def console_input(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –∫–æ–Ω—Å–æ–ª–∏"""
        while True:
            try:
                await asyncio.sleep(0.1)
                data = await asyncio.get_event_loop().run_in_executor(None, input, "> ")
                clear_line()
                await self.process_command(data.strip())
            except (KeyboardInterrupt, EOFError):
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                await self.graceful_shutdown()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {e}")

    async def process_command(self, command):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å-–¥–∏—Å–ø–µ—Ç—á–µ—Ä"""
        if not command:
            return

        cmd = command.split()[0].lower()
        command_handlers = {
            'start': lambda: self.handle_start(),
            'start_mailing': lambda: self.handle_start_mailing(),
            'stop': lambda: self.handle_stop(),
            'search': lambda: self.handle_search(),
            'me': lambda: self.handle_me(),
            'status': lambda: self.handle_status(),
            'exit': lambda: self.handle_exit(),
            'help': lambda: self.handle_help()
        }

        handler = command_handlers.get(cmd, lambda: self.handle_unknown())
        await handler()  # –í—ã–∑—ã–≤–∞–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

    async def handle_start(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start"""

        if self.is_running:
            logger.info("‚úÖ –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        else:
            await self.app.start()
            self.setup_handlers()
            self.is_running = True
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω")
            self.chats = await self.search_me_channels()

    async def handle_start_mailing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start_mailing"""
        if not self.is_running:
            logger.warning("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            self.bot_task = asyncio.create_task(self.start_bot_function())
            logger.info("ü§ñ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É {e}")

    async def handle_stop(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã stop"""
        if not self.is_running:
            logger.warning("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            await self.stop_bot_function()
            logger.info("ü§ñ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.warning(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É {e}")

    async def search_me_channels(self):
        if not self.is_running:
            logger.warning("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return
        try:
            chats = []
            processed_chats = set()

            logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
            async for dialog in self.app.get_dialogs(chat_list=0):
                chat = dialog.chat

                if chat.id in processed_chats:
                    break

                if chat.type == ChatType.SUPERGROUP:
                    try:
                        if str(chat.id).startswith('-100'):
                            chats.append(chat.id)
                            logger.info(chat.title)
                        await asyncio.sleep(1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–æ—Ç–∏–≤ floodwait

                    except Exception as ex:
                        print(f'‚ùå –û—à–∏–±–∫–∞ {ex}')

                processed_chats.add(chat.id)

            await asyncio.sleep(0.5)

            async for dialog in self.app.get_dialogs(chat_list=1):
                chat = dialog.chat

                if chat.id in processed_chats:
                    break

                if chat.type == ChatType.SUPERGROUP:
                    try:
                        if str(chat.id).startswith('-100'):
                            chats.append(chat.id)
                            logger.info(chat.title)
                        await asyncio.sleep(1)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—É –ø—Ä–æ—Ç–∏–≤ floodwait

                    except Exception as ex:
                        print(f'‚ùå –û—à–∏–±–∫–∞ {ex}')

                processed_chats.add(chat.id)

            return chats
        except Exception as e:
            logger.warning(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É {e}")

    async def handle_search(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã search"""
        if not self.is_running:
            logger.warning("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return

        try:
            groups = await search_chats_raw(self.app, query="–í–∑–∞–∏–º–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏")
            print('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è? [y/n]')
            await asyncio.sleep(0.5)
            a = input('> ')
            clear_line()
            
            if a == 'y':
                for chat in groups:
                    if await is_member(self.app, chat_id=chat['id']):
                        continue
                    try:
                        await self.app.join_chat(chat_id=chat['id'])
                        logger.info(f"–ó–∞—à–ª–∏ –≤ {chat['title']}")
                    except FloodWait as e:
                        logger.warning(
                            f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {e.value} —Å–µ–∫—É–Ω–¥, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–Ω–æ–≤–∞ –≤—Å—Ç—É–ø–∞—Ç—å –≤ –≥—Ä—É–ø–ø—ã, –µ—Å—Ç—å —Ä–∏—Å–∫ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω")
                        return
                    except Exception as ex:
                        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–æ–¥–∞ –≤ {chat['title']} {ex}")
                    await asyncio.sleep(5)
        except Exception as e:
            logger.warning(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É {e}")

    async def handle_me(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã me"""
        if not self.is_running:
            logger.warning("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π 'start'")
            return

        me = await self.app.get_me()
        print(f"ü§ñ ID: {me.id}")
        print(f"üìõ –ò–º—è: {me.first_name}")
        print(f"üîó Username: @{me.username}")
        print(f"‚≠ê Premium: {'–î–∞' if me.is_premium else '–ù–µ—Ç'}")

    async def handle_status(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã status"""
        status = "üü¢ –ó–∞–ø—É—â–µ–Ω" if self.is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        logger.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")

    async def handle_exit(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã exit"""
        if self.is_running:
            await self.app.stop()
            logger.info("‚èπÔ∏è –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.is_running = False
        await self.graceful_shutdown()

    async def handle_help(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã help"""
        help_text = (
            'ü§ñ –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê: \n'
            'üöÄ start   - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n'
            '‚èπÔ∏è stop    - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n'
            'üöÄ start_mailing - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n'
            'üöÄ search  - –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤\n'
            'üìä status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n'
            'üë§ me      - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
            '‚ùì help    - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'
        )
        print(help_text)

    async def handle_unknown(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã"""
        logger.warning("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")

    async def graceful_shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        clear_line()
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

        if self.is_running:
            try:
                await self.app.stop()
                self.is_running = False
                logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")

        logger.info("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        time.sleep(1)
        sys.exit(0)


    async def start_bot_function(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            logger.info("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞...")
            await main_bot_function(self.app, self.chats)
        except asyncio.CancelledError:
            logger.info("‚èπÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞: {e}")

        finally:
            self.is_running = False

    async def stop_bot_function(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞"""
        if self.bot_task and not self.bot_task.done():
            self.bot_task.cancel()
            try:
                await self.bot_task
            except asyncio.CancelledError:
                pass
            logger.info("‚èπÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        self.is_running = False


async def main():
    console = AsyncConsoleManager()
    logger.info("üöÄ Pyrogram Console Manager –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìù –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥")

    try:
        await console.console_input()
    except asyncio.CancelledError:
        clear_line()
        logger.info("–ó–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if console.is_running:
            await console.app.stop()
            logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        # check = licensia_check()

        asyncio.run(main())
        # else:
            # logger.error(check)
    except KeyboardInterrupt:
        logger.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ Ctrl+C")