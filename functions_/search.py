import asyncio
from typing import List

from pyrogram import Client
from pyrogram.errors import FloodWait
from pyrogram.raw import functions
from pyrogram.errors import UserNotParticipant, ChannelPrivate, ChatAdminRequired
from data.log import logger

async def is_member(client: Client, chat_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞"""
    try:
        await client.get_chat_member(chat_id=chat_id, user_id="me")
        return True
    except UserNotParticipant:
        return False  # –ù–µ —É—á–∞—Å—Ç–Ω–∏–∫
    except ChannelPrivate:
        return False  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    except ChatAdminRequired:
        return False  # –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

def handle_flood_wait(retries=3):
    def decorator(func):
        async def wrapper(*args, **kwargs):
            for attempt in range(retries):
                try:
                    return await func(*args, **kwargs)
                except FloodWait as e:
                    wait_time = e.value
                    logger.error(f"‚ö†Ô∏è FloodWait: –ñ–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries})")
                    await asyncio.sleep(wait_time)
                except Exception as e:
                    logger.error(f"‚ùå –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}")
                    break
            return None
        return wrapper
    return decorator

@handle_flood_wait(retries=3)
async def search_chats_raw(client: Client, query) -> List:
    """–ü–æ–∏—Å–∫ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ raw API"""
    cnt = 0
    chats = []
    logger.info("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:")
    try:
        result = await client.invoke(
            functions.contacts.Search(
                q=query,
                limit=10
            )
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for chat in result.chats:
            cnt += 1
            # if getattr(chat, 'participants_count', '') <= 500:
            #     continue

            chat_info = {
                'id': "-100" + f"{chat.id}",
                'title': getattr(chat, 'title', ''),
                'username': getattr(chat, 'username', ''),
                'type': type(chat).__name__,
                'podpischiki': getattr(chat, 'participants_count', '')
            }

            chats.append(chat_info)
            logger.info(f"{cnt}: üë• {type(chat).__name__}: {chat_info['title']}: {chat_info['id']}: {chat_info['username']}: {chat_info['podpischiki']}")

        return chats

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []



# if __name__ == "__main__":
#     try:
#         app.run(main())
#     except KeyboardInterrupt:
#         print('\n‚èπÔ∏è –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
#
# if await is_member(client, chat_id=str("-100" + f"{chat.id}")):
#     continue
# else:
#     try:
#         await client.join_chat(chat_id=str("-100" + f"{chat.id}"))
#         print(f"–ó–∞—à–ª–∏ –≤ {getattr(chat, 'title', '')}")
#
#     except Exception as ex:
#         print(f"–û—à–∏–±–∫–∞ –∑–∞—Ö–æ–¥–∞ –≤ {getattr(chat, 'title', '')} {ex}")
# await asyncio.sleep(3)