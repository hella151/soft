import asyncio
import random
from typing import Any
from data.log import logger
from pyrogram import Client, enums
from pyrogram.errors import FloodWait, RPCError, ChatWriteForbidden, ChannelPrivate, UserBannedInChannel


async def async_generator(my_list: list) -> Any:
    if my_list is None:
        yield None

    for item in my_list:
        yield item

async def delete(client: Client, chats_id):
    async for id in async_generator(my_list=chats_id):
        try:
            await client.leave_chat(chat_id=id)
            await asyncio.sleep(5)
        except Exception:
            continue

async def mess_to_chat(message_text: str, client, chats_id):
    async for id in async_generator(chats_id):
        await client.send_chat_action(chat_id=id, action=enums.ChatAction.TYPING, progress=0)
        await asyncio.sleep(1)
        chat = await client.get_chat(id)

        try:
            await client.send_message(chat_id=id, text=message_text)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç -> {chat.title}")
        except FloodWait as e:
            wait_time = e.value + 5
            logger.warning(f"‚è≥ FloodWait: –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)
        except RPCError as e:
            logger.error(f"‚ö†Ô∏è RPCError: {e}")
            continue
        except ChatWriteForbidden:
            logger.error(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–∏–ª –≤–∞–º –¥–æ—Å—Ç—É–ø –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç -> {chat.title}")
            continue
        except ChannelPrivate:
            logger.error(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª {chat.title}")
            continue
        except UserBannedInChannel:
            logger.error(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ {chat.title}")
            continue
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e} –≤ —á–∞—Ç–µ: {chat.title}")
            continue
        await asyncio.sleep(10 + random.randint(1, 5))