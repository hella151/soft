import asyncio
import random
import sys
from typing import Any
from data.log import logger
from pyrogram import Client, enums
from pyrogram.errors import FloodWait, RPCError, ChatWriteForbidden, ChannelPrivate, UserBannedInChannel


async def async_generator(my_list: list) -> Any:
    if not my_list:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫/None
        return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º

    for item in my_list:
        yield item

async def delete(client: Client, chats_id):
    async for id in async_generator(my_list=chats_id):
        try:
            await client.leave_chat(chat_id=id)
            await asyncio.sleep(5)
        except Exception:
            continue

def clear_line():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏"""
    sys.stdout.write('\r\033[K')
    sys.stdout.flush()

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –§–£–ù–ö–¶–ò–ò mess_to_chat
async def mess_to_chat(message_text: str, client, chats_id):
    global chat
    clear_line()
    if not chats_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        logger.warning("üì≠ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç")
        return

    async for chat_id in async_generator(chats_id):
        print(chat_id)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å chat_id
            if not chat_id or not isinstance(chat_id, (int, str)):
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chat_id: {chat_id}")
                continue

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
            chat = await client.get_chat(chat_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            await client.send_chat_action(
                chat_id=chat_id,
                action=enums.ChatAction.TYPING
            )
            await asyncio.sleep(1)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await client.send_message(chat_id=chat_id, text=message_text)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç -> {chat.title}")

        except FloodWait as e:
            wait_time = e.value + 5
            logger.warning(f"‚è≥ FloodWait: –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥")
            await asyncio.sleep(wait_time)

        except ChatWriteForbidden:
            logger.error(f"‚úã –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç: {getattr(chat, 'title', 'Unknown')}")
            continue

        except ChannelPrivate:
            logger.error(f"üîí –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {getattr(chat, 'title', 'Unknown')}")
            continue

        except UserBannedInChannel:
            logger.error(f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ: {getattr(chat, 'title', 'Unknown')}")
            continue

        except ValueError as e:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {e.args, e}")
            continue

        except RPCError as e:
            logger.error(f"‚ö†Ô∏è RPCError: {e}")
            continue

        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            continue

        # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        await asyncio.sleep(10 + random.randint(1, 5))