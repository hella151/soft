import json
from pyrogram import Client, filters
import asyncio
import time


def get_session_strings(filename="sessions.json"):
    with open(filename, 'r') as file:
        return [session['session_string'] for session in json.load(file)]


class SessionSwitcher:
    def __init__(self):
        self.clients = {}
        self.current_session = None
        self.start_time = None
        self.is_switching = False

    async def setup_session(self, name, session_string, work_time=300):
        """–°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é"""
        client = Client(
            name=f"session_{name}",
            api_id="28982778",
            api_hash="54b8ea23241abdef8044090c3c9a2add",
            session_string=session_string
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
        @client.on_message(filters.private & filters.text)
        async def handler(client, message):
            if self.is_switching:
                return

            if message.text == "/time":
                remaining = self.get_remaining_time()
                await message.reply(f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫.")
            elif message.text == "/next":
                await message.reply("üîú –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
                await self.switch_next()
            elif message.text == "/status":
                await message.reply(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: {self.current_session}")
            elif message.text == "/list":
                sessions = "\n".join([f"‚Ä¢ {name}" for name in self.clients.keys()])
                await message.reply(f"üìã –°–µ—Å—Å–∏–∏:\n{sessions}")

        self.clients[name] = {
            'client': client,
            'work_time': work_time,
            'active': False
        }

    def get_remaining_time(self):
        if not self.current_session or not self.start_time:
            return 0
        elapsed = time.time() - self.start_time
        remaining = self.clients[self.current_session]['work_time'] - elapsed
        return max(0, int(remaining))

    async def switch_to(self, session_name):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å–µ—Å—Å–∏—é"""
        if self.is_switching:
            return

        self.is_switching = True
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞: {session_name}")

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
        if self.current_session and self.clients[self.current_session]['active']:
            self.clients[self.current_session]['active'] = False

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é
        self.current_session = session_name
        self.clients[session_name]['active'] = True
        self.start_time = time.time()

        try:
            me = await self.clients[session_name]['client'].get_me()
            print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: {session_name} - {me.first_name}")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {self.clients[session_name]['work_time']} —Å–µ–∫.")
            print("-" * 40)

            # –£–ë–†–ê–ù–ê –°–¢–†–û–ö–ê –° –û–¢–ü–†–ê–í–ö–û–ô –°–û–û–ë–©–ï–ù–ò–Ø –ù–ê –ù–ï–í–ï–†–ù–´–ô CHAT_ID
            # await self.clients[session_name]['client'].send_message(chat_id='6334346361', text='...')

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ {session_name}: {e}")
        finally:
            self.is_switching = False

    async def switch_next(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å–µ—Å—Å–∏—é"""
        if self.is_switching:
            return

        sessions = list(self.clients.keys())
        if not sessions:
            return

        if not self.current_session:
            next_session = sessions[0]
        else:
            try:
                current_index = sessions.index(self.current_session)
                next_index = (current_index + 1) % len(sessions)
                next_session = sessions[next_index]
            except ValueError:
                next_session = sessions[0]

        if next_session != self.current_session:
            await self.switch_to(next_session)

    async def start_all(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {len(self.clients)} —Å–µ—Å—Å–∏–π...")

        for name, data in self.clients.items():
            try:
                await data['client'].start()
                data['active'] = True
                me = await data['client'].get_me()
                print(f"‚úÖ {name}: {me.first_name}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ {name}: {e}")

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏
        if self.clients:
            first_session = list(self.clients.keys())[0]
            await self.switch_to(first_session)

        await self.main_loop()

    async def main_loop(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
        print("üîõ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ...")

        while True:
            try:
                # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(1)

                if self.is_switching:
                    continue

                remaining = self.get_remaining_time()

                if remaining <= 0:
                    print("‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è...")
                    await self.switch_next()
                else:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                    if remaining % 10 == 0:
                        print(f"‚è±Ô∏è –î–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {remaining} —Å–µ–∫.")

            except KeyboardInterrupt:
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                await asyncio.sleep(5)

    async def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏"""
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏...")
        for name, data in self.clients.items():
            if data['active']:
                try:
                    await data['client'].stop()
                    print(f"‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {name}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")


async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏–∏
    try:
        session_strings = get_session_strings("sessions.json")
        print(f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(session_strings)} —Å–µ—Å—Å–∏–π")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return

    if not session_strings:
        print("‚ùå –ù–µ—Ç —Å–µ—Å—Å–∏–π!")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–≤–∏—Ç—á–µ—Ä
    switcher = SessionSwitcher()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Å—Å–∏–∏ (–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã - 300 —Å–µ–∫—É–Ω–¥)
    for i, session_string in enumerate(session_strings, 1):
        await switcher.setup_session(f"account_{i}", session_string, 60)

    print("üí¨ –ö–æ–º–∞–Ω–¥—ã: /time, /next, /status, /list")
    print("=" * 50)

    try:
        await switcher.start_all()
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
    finally:
        await switcher.stop_all()
        print("‚úÖ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
